# Multi-stage Dockerfile for FolioFox React Frontend
# Stage 1: Build stage
FROM node:18-alpine AS builder

# Install security updates and build dependencies
RUN apk update && apk add --no-cache \
    ca-certificates \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY frontend/package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --silent --no-audit --no-fund

# Copy source code
COPY frontend/ .

# Add build arguments for version info
ARG BUILD_VERSION=dev
ARG BUILD_COMMIT=unknown
ARG BUILD_DATE
ARG VITE_API_BASE_URL=/api/v1

# Set build environment variables
ENV NODE_ENV=production \
    VITE_BUILD_VERSION=${BUILD_VERSION} \
    VITE_BUILD_COMMIT=${BUILD_COMMIT} \
    VITE_BUILD_DATE=${BUILD_DATE} \
    VITE_API_BASE_URL=${VITE_API_BASE_URL}

# Build the application with optimizations
RUN npm run build && \
    npm run test:run && \
    npm prune --production

# Stage 2: Production stage with Nginx
FROM nginx:1.25-alpine

# Add build labels for metadata
LABEL maintainer="FolioFox Team" \
      org.opencontainers.image.title="FolioFox Frontend" \
      org.opencontainers.image.description="eBook management system frontend" \
      org.opencontainers.image.vendor="FolioFox" \
      org.opencontainers.image.licenses="MIT"

# Install security updates and required tools
RUN apk update && apk add --no-cache \
    ca-certificates \
    curl \
    wget \
    && rm -rf /var/cache/apk/*

# Remove default Nginx content
RUN rm -rf /usr/share/nginx/html/*

# Create non-root user with consistent UID/GID
RUN addgroup -g 1001 -S foliofox && \
    adduser -S -D -H -u 1001 -g foliofox -s /sbin/nologin foliofox

# Copy built application from builder stage
COPY --from=builder --chown=foliofox:foliofox /app/dist /usr/share/nginx/html

# Copy custom Nginx configuration
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf

# Create Nginx directories with proper permissions and log forwarding
RUN mkdir -p /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp /var/log/nginx /var/run && \
    chown -R foliofox:foliofox /var/cache/nginx /var/log/nginx /var/run \
    /usr/share/nginx/html /etc/nginx/conf.d && \
    ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log

# Add build metadata
ARG BUILD_VERSION=dev
ARG BUILD_COMMIT=unknown
ARG BUILD_DATE
ENV BUILD_VERSION=${BUILD_VERSION} \
    BUILD_COMMIT=${BUILD_COMMIT} \
    BUILD_DATE=${BUILD_DATE}

# Switch to non-root user
USER foliofox

# Expose port
EXPOSE 3000

# Enhanced health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Start Nginx with proper signal handling
STOPSIGNAL SIGQUIT
CMD ["nginx", "-g", "daemon off;"]