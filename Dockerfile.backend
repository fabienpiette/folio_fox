# Multi-stage Dockerfile for FolioFox Go Backend
# Stage 1: Build stage
FROM golang:1.21-alpine AS builder

# Install security updates and required tools
RUN apk update && apk add --no-cache \
    ca-certificates \
    git \
    tzdata \
    gcc \
    musl-dev \
    sqlite-dev \
    && rm -rf /var/cache/apk/*

# Create non-root user for build
RUN adduser -D -g '' foliofox

# Set working directory
WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./

# Download dependencies with verification
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Add build info and version
ARG BUILD_VERSION=dev
ARG BUILD_COMMIT=unknown
ARG BUILD_DATE

# Build the application with optimizations and build info
# Set SQLite build tags to fix Alpine Linux compatibility
ENV CGO_ENABLED=1 GOOS=linux GOARCH=amd64
ENV CGO_CFLAGS="-D_LARGEFILE64_SOURCE"
RUN go build \
    -tags "sqlite_omit_load_extension sqlite_foreign_keys" \
    -ldflags="-w -s -X main.version=${BUILD_VERSION} -X main.commit=${BUILD_COMMIT} -X main.date=${BUILD_DATE}" \
    -a -installsuffix cgo \
    -o foliofox \
    ./cmd/foliofox

# Generate API documentation
RUN go install github.com/swaggo/swag/cmd/swag@latest && \
    swag init -g cmd/foliofox/main.go -o ./docs

# Stage 2: Runtime stage
FROM alpine:3.18

# Add build labels for metadata
LABEL maintainer="FolioFox Team" \
      org.opencontainers.image.title="FolioFox Backend" \
      org.opencontainers.image.description="eBook management system backend" \
      org.opencontainers.image.vendor="FolioFox" \
      org.opencontainers.image.licenses="MIT"

# Install security updates and runtime dependencies
RUN apk update && apk add --no-cache \
    ca-certificates \
    tzdata \
    sqlite \
    curl \
    wget \
    && rm -rf /var/cache/apk/* \
    && update-ca-certificates

# Create non-root user with consistent UID/GID
RUN addgroup -g 1001 -S foliofox && \
    adduser -S -D -H -u 1001 -g foliofox -s /sbin/nologin foliofox

# Create application directories with proper permissions
RUN mkdir -p /app/data /app/logs /app/downloads /app/config /app/docs && \
    chown -R foliofox:foliofox /app

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder --chown=foliofox:foliofox /app/foliofox .

# Copy database migrations and configuration
COPY --from=builder --chown=foliofox:foliofox /app/database/ ./database/

# Copy API documentation
COPY --from=builder --chown=foliofox:foliofox /app/docs/ ./docs/

# Set proper file permissions and create symlinks for logs
RUN chmod +x foliofox && \
    ln -sf /dev/stdout /app/logs/access.log && \
    ln -sf /dev/stderr /app/logs/error.log

# Switch to non-root user
USER foliofox

# Expose application port and metrics port
EXPOSE 8080 9090

# Enhanced health check with startup probe
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/health || exit 1

# Set environment variables with better defaults
ENV GIN_MODE=release \
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    DATABASE_PATH=/app/data/foliofox.db \
    FOLIOFOX_REDIS_HOST=redis \
    FOLIOFOX_REDIS_PORT=6379 \
    METRICS_ENABLED=true \
    METRICS_PORT=9090 \
    GRACEFUL_SHUTDOWN_TIMEOUT=30s

# Add metadata about the build
ARG BUILD_VERSION=dev
ARG BUILD_COMMIT=unknown
ARG BUILD_DATE
ENV BUILD_VERSION=${BUILD_VERSION} \
    BUILD_COMMIT=${BUILD_COMMIT} \
    BUILD_DATE=${BUILD_DATE}

# Run the application with proper signal handling
CMD ["./foliofox"]