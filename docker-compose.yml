version: '3.8'

# FolioFox Production Docker Compose Configuration
# For monitoring: docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml up
# For volumes: docker-compose -f docker-compose.yml -f docker-compose.volumes.yml up

services:
  # PostgreSQL Database (Alternative to SQLite for production)
  postgres:
    image: postgres:15-alpine
    container_name: foliofox-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-foliofox}
      POSTGRES_USER: ${POSTGRES_USER:-foliofox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-foliofox} -d ${POSTGRES_DB:-foliofox}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - postgres

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: foliofox-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FolioFox Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        BUILD_COMMIT: ${BUILD_COMMIT:-unknown}
        BUILD_DATE: ${BUILD_DATE:-unknown}
    image: foliofox/backend:${BUILD_VERSION:-latest}
    container_name: foliofox-backend
    restart: unless-stopped
    environment:
      # Application Configuration
      GIN_MODE: ${GIN_MODE:-release}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Database Configuration
      DATABASE_TYPE: ${DATABASE_TYPE:-sqlite}
      DATABASE_PATH: ${DATABASE_PATH:-/app/data/foliofox.db}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-foliofox}
      POSTGRES_USER: ${POSTGRES_USER:-foliofox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      
      # Redis Configuration
      REDIS_ADDR: ${REDIS_ADDR:-redis:6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      REDIS_DB: ${REDIS_DB:-0}
      
      # Server Configuration
      SERVER_PORT: ${SERVER_PORT:-8080}
      SERVER_HOST: ${SERVER_HOST:-0.0.0.0}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}
      
      # Download Configuration
      DOWNLOAD_PATH: ${DOWNLOAD_PATH:-/app/downloads}
      MAX_CONCURRENT_DOWNLOADS: ${MAX_CONCURRENT_DOWNLOADS:-5}
      DOWNLOAD_TIMEOUT: ${DOWNLOAD_TIMEOUT:-300s}
      
      # Search Configuration
      SEARCH_CACHE_TTL: ${SEARCH_CACHE_TTL:-300}
      MAX_SEARCH_RESULTS: ${MAX_SEARCH_RESULTS:-1000}
      
      # Metrics and Monitoring
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      METRICS_PORT: ${METRICS_PORT:-9090}
      GRACEFUL_SHUTDOWN_TIMEOUT: ${GRACEFUL_SHUTDOWN_TIMEOUT:-30s}
      
      # Security Configuration
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - downloads:/app/downloads
      - ./config:/app/config:ro
    ports:
      - "${BACKEND_PORT:-8080}:8080"
      - "${METRICS_PORT:-9090}:9090"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FolioFox Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        BUILD_COMMIT: ${BUILD_COMMIT:-unknown}
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api/v1}
    image: foliofox/frontend:${BUILD_VERSION:-latest}
    container_name: foliofox-frontend
    restart: unless-stopped
    environment:
      NGINX_PORT: ${NGINX_PORT:-3000}
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Portainer for Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: foliofox-portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
      - ./docker/portainer/templates:/templates:ro
    ports:
      - "${PORTAINER_PORT:-9000}:9000"
      - "${PORTAINER_EDGE_PORT:-8000}:8000"
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - management

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: foliofox-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: foliofox-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-changeme}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

  # Traefik Reverse Proxy (Optional)
  traefik:
    image: traefik:v3.0
    container_name: foliofox-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - foliofox-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - proxy

# Networks
networks:
  foliofox-network:
    name: foliofox-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: foliofox-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# Volumes
volumes:
  # Database volumes
  postgres_data:
    name: foliofox-postgres-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  # Cache volumes
  redis_data:
    name: foliofox-redis-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  
  # Application volumes
  app_data:
    name: foliofox-app-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/app
  
  app_logs:
    name: foliofox-app-logs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_DIR:-./logs}/app
  
  downloads:
    name: foliofox-downloads
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOWNLOADS_DIR:-./downloads}
  
  # Management volumes
  portainer_data:
    name: foliofox-portainer-data
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    name: foliofox-prometheus-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/prometheus
  
  grafana_data:
    name: foliofox-grafana-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/grafana
  
  # SSL/TLS volumes
  letsencrypt:
    name: foliofox-letsencrypt
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/letsencrypt